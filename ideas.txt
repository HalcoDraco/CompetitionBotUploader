Classes:
   Tenir certs punts a distribuir entre atributs
   -Vida (apareixen rewards que donen vida)
   -Escut (regenera de normal, si s'acaba no es regenera, ignorat per la melee)
   -Dany (melee, molt més efectiu que les bales, con delay)

Accions:
   Capacitats
      move
      shoot (daño constante)
      melee (daño configurable) ignora el escudo

   Habilitats
      dash (teleport)
      super-shot (daño base de melee (ignora el escudo))
      super-melee (quita el daño normal a la vida pero el doble al escudo) ex: 30dmg -> -30 vida, -60 escudo

Drops:
   puntos (básico)
   vida (el valor de la mínima vida posible (50))
   restore shield (hace que pueda volver a regenerar escudo si se le ha acabado)

Nivell de coneixement del jugador?  
   El més alt possible (sense interferir en el gameplay)

Joc:
   Tens x temps (ticks) per aconseguir els màxims punts possibles.
   Cada y temps apareixen (ràndom o posició predeterminat?) rewards (agar.io) que donen z punts 
   independentment dels que hi ha en el mapa. (min (ceil(players/4)) y max max((players-1), 1)) (players va disminuyendo a medida que mueren)
   Quan mates algú, et dona 50% dels seus punts + u punts. (te los da directamente)

Collision algorithm: 
   Inicialització:
      - Divide the map into m*m squares, where m is MAP_WIDTH / COLLISION_SQUARE_SIZE, m > 3.
      - Per a cada quadrat, fer una llista que contingui els jugadors que hi són, una amb els drops, i una amb les bales.
      
   Actualització - cada tick:
      - Col·locar cada element del mapa a la llista de la cel·la corresponent ( O(n) )
      comprovar que no s'hagi tret el jugador
      - Comprovar col·lisió de cada robot (r) amb cadascun dels altres elements (e),
      de la seva cel·la i les veines en un radi COLLISION_SEARCH_RADIUS (e + r = n), (cost = e * (com a molt) r, cost << O(n^2))